"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
function resolveVue(source) {
    const suffix = ['.vue', String.raw `${path_1.sep}index.vue`];
    for (const ext of suffix) {
        const retPath = source + ext;
        const exist = fs_1.existsSync(retPath);
        if (exist) {
            return retPath;
        }
    }
}
function vitePluginResolveExtentionVue() {
    const resolvedMap = {};
    let config;
    let base;
    return {
        name: 'vite-plugin-resolve-extention-vue',
        config(config, env) {
            const { extensions = [] } = config.resolve || {};
            if (env.mode === 'development' && extensions.length) {
                extensions.splice(extensions.indexOf('.vue'), 1);
            }
        },
        configResolved(resolvedConfig) {
            config = resolvedConfig;
            // C:\\path\\to\\path -> /path/to/path
            base = config.root.replace(/^[A-Z]:/, '').replace(/\\+/g, '/');
        },
        resolveId(source, importer) {
            if (config.mode !== 'development' || !importer || /\.\w+$/.test(source))
                return null;
            if (!source.startsWith(base) && !source.startsWith('/src') && !source.startsWith('.'))
                return null;
            if (source.startsWith(base) && !importer.endsWith('.html'))
                return null;
            const key = [source, importer].join(':');
            if (resolvedMap[key]) {
                return resolvedMap[key];
            }
            const resolved = resolveVue((() => {
                if (source.startsWith('.')) {
                    return path_1.join(importer, '../', source);
                }
                // importer ends with `.html`
                // source starts with base (apear on windows)
                if (source.startsWith(base)) {
                    return path_1.join(config.root, source.substring(base.length));
                }
                // importer ends with `.html`
                // source starts with `/src` (apear on linux)
                return path_1.join(config.root, source);
            })());
            if (resolved) {
                resolvedMap[key] = resolved;
                return resolvedMap[key];
            }
        },
    };
}
exports.default = vitePluginResolveExtentionVue;
;
