{
  "version": 3,
  "sources": ["../../../node_modules/everscale-inpage-provider/dist/utils.js", "../../../node_modules/everscale-inpage-provider/dist/models.js", "../../../node_modules/everscale-inpage-provider/dist/stream.js", "../../../node_modules/everscale-inpage-provider/dist/contract.js", "../../../node_modules/everscale-inpage-provider/dist/api.js", "../../../node_modules/everscale-inpage-provider/dist/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUniqueId = exports.mergeTransactions = exports.LT_COLLATOR = exports.Semaphore = exports.DelayedTransactions = exports.MessageExpiredException = exports.AddressLiteral = exports.isAddressObject = exports.Address = void 0;\n/**\n * @category Utils\n */\nclass Address {\n    constructor(address) {\n        this.equals = (other) => this._equals(other);\n        this._address = address;\n    }\n    toString() {\n        return this._address;\n    }\n    toJSON() {\n        return this._address;\n    }\n    _equals(other) {\n        if (typeof other === 'string') {\n            return this._address === other;\n        }\n        else {\n            return this._address === (other === null || other === void 0 ? void 0 : other._address);\n        }\n    }\n}\nexports.Address = Address;\n/**\n * Check whether the provider object is instance of `Address`,\n * handling the case of duplicated dependencies.\n */\nfunction isAddressObject(address) {\n    return (address != null &&\n        (address instanceof Address ||\n            Object.getPrototypeOf(address).constructor.name === Address.prototype.constructor.name));\n}\nexports.isAddressObject = isAddressObject;\n/**\n * @category Utils\n */\nclass AddressLiteral extends Address {\n    constructor(address) {\n        super(address);\n    }\n}\nexports.AddressLiteral = AddressLiteral;\n/**\n * @category Utils\n */\nclass MessageExpiredException extends Error {\n    constructor(address, hash) {\n        super('Message expired');\n        this.address = address;\n        this.hash = hash;\n    }\n}\nexports.MessageExpiredException = MessageExpiredException;\nclass DelayedTransactions {\n    constructor() {\n        this.transactions = new Map();\n    }\n    async waitTransaction(address, hash) {\n        var _a;\n        let transaction = (_a = this.transactions.get(hash)) === null || _a === void 0 ? void 0 : _a.promise;\n        if (transaction == null) {\n            let resolve;\n            let reject;\n            transaction = new Promise((promiseResolve, promiseReject) => {\n                resolve = (tx) => promiseResolve(tx);\n                reject = () => promiseReject();\n            });\n            this.transactions.set(hash, {\n                promise: transaction,\n                resolve: resolve,\n                reject: reject,\n            });\n        }\n        const tx = await transaction;\n        if (tx == null) {\n            throw new MessageExpiredException(address, hash);\n        }\n        return tx;\n    }\n    fillTransaction(hash, transaction) {\n        const pendingTransaction = this.transactions.get(hash);\n        if (pendingTransaction != null) {\n            pendingTransaction.resolve(transaction);\n        }\n        else {\n            this.transactions.set(hash, {\n                promise: Promise.resolve(transaction),\n                resolve: () => {\n                },\n                reject: () => {\n                },\n            });\n        }\n    }\n}\nexports.DelayedTransactions = DelayedTransactions;\n/**\n * @category Utils\n */\nclass Semaphore {\n    constructor(count) {\n        this.tasks = [];\n        this.sched = () => {\n            var _a;\n            if (this.count > 0 && this.tasks.length > 0) {\n                this.count--;\n                (_a = this.tasks.shift()) === null || _a === void 0 ? void 0 : _a();\n            }\n        };\n        this.count = count;\n    }\n    acquire() {\n        return new Promise((res, _rej) => {\n            this.tasks.push(() => {\n                let released = false;\n                res(() => {\n                    if (!released) {\n                        released = true;\n                        this.count++;\n                        this.sched();\n                    }\n                });\n            });\n            nextTick(this.sched);\n        });\n    }\n    releaseAll() {\n        var _a;\n        while (this.tasks.length > 0) {\n            (_a = this.tasks.shift()) === null || _a === void 0 ? void 0 : _a();\n        }\n    }\n}\nexports.Semaphore = Semaphore;\nfunction byObserver(Observer) {\n    const node = document.createTextNode('');\n    let queue, currentQueue, bit = 0, i = 0;\n    new Observer(function () {\n        let callback;\n        if (!queue) {\n            if (!currentQueue)\n                return;\n            queue = currentQueue;\n        }\n        else if (currentQueue) {\n            queue = currentQueue.slice(i).concat(queue);\n        }\n        currentQueue = queue;\n        queue = null;\n        i = 0;\n        if (typeof currentQueue === 'function') {\n            callback = currentQueue;\n            currentQueue = null;\n            callback();\n            return;\n        }\n        node.data = (bit = ++bit % 2);\n        while (i < currentQueue.length) {\n            callback = currentQueue[i];\n            i++;\n            if (i === currentQueue.length)\n                currentQueue = null;\n            callback();\n        }\n    }).observe(node, { characterData: true });\n    return function (fn) {\n        if (queue) {\n            if (typeof queue === 'function')\n                queue = [queue, fn];\n            else\n                queue.push(fn);\n            return;\n        }\n        queue = fn;\n        node.data = (bit = ++bit % 2);\n    };\n}\nconst nextTick = (function () {\n    // queueMicrotask\n    if (typeof queueMicrotask === 'function') {\n        return queueMicrotask;\n    }\n    // MutationObserver\n    if ((typeof document === 'object') && document) {\n        if (typeof MutationObserver === 'function')\n            return byObserver(MutationObserver);\n        if (typeof window.WebKitMutationObserver === 'function')\n            return byObserver(window.WebKitMutationObserver);\n    }\n    /* @ts-ignore */\n    if (typeof setImmediate === 'function') {\n        /* @ts-ignore */\n        return setImmediate;\n    }\n    if ((typeof setTimeout === 'function') || (typeof setTimeout === 'object')) {\n        return function (cb) {\n            setTimeout(cb, 0);\n        };\n    }\n    throw new Error('No `nextTick` implementation found');\n}());\n/**\n * @category Utils\n */\nexports.LT_COLLATOR = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n/**\n * Modifies knownTransactions array, merging it with new transactions.\n * All arrays are assumed to be sorted by descending logical time.\n *\n * > Note! This method does not remove duplicates.\n *\n * @param knownTransactions\n * @param newTransactions\n * @param info\n *\n * @category Utils\n */\nfunction mergeTransactions(knownTransactions, newTransactions, info) {\n    if (info.batchType === 'old') {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    if (knownTransactions.length === 0) {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    // Example:\n    // known lts: [N, N-1, N-2, N-3, (!) N-10,...]\n    // new lts: [N-4, N-5]\n    // batch info: { minLt: N-5, maxLt: N-4, batchType: 'new' }\n    // 1. Skip indices until known transaction lt is greater than the biggest in the batch\n    let i = 0;\n    while (i < knownTransactions.length &&\n        exports.LT_COLLATOR.compare(knownTransactions[i].id.lt, info.maxLt) >= 0) {\n        ++i;\n    }\n    // 2. Insert new transactions\n    knownTransactions.splice(i, 0, ...newTransactions);\n    return knownTransactions;\n}\nexports.mergeTransactions = mergeTransactions;\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parsePartialTokensObject = exports.parseTokensObject = exports.serializeTokensObject = exports.parseAccountInteraction = exports.parsePermissions = exports.parseMessage = exports.serializeMessage = exports.parseTransaction = exports.serializeTransaction = void 0;\nconst utils_1 = require(\"./utils\");\n/**\n * @category Models\n */\nfunction serializeTransaction(transaction) {\n    // NOTE: deep copy to prevent sending objects with prototypes through the channel\n    return {\n        id: {\n            hash: transaction.id.hash,\n            lt: transaction.id.lt,\n        },\n        prevTransactionId: transaction.prevTransactionId != null\n            ? {\n                hash: transaction.prevTransactionId.hash,\n                lt: transaction.prevTransactionId.lt,\n            }\n            : undefined,\n        createdAt: transaction.createdAt,\n        aborted: transaction.aborted,\n        exitCode: transaction.exitCode,\n        resultCode: transaction.resultCode,\n        origStatus: transaction.origStatus,\n        endStatus: transaction.endStatus,\n        totalFees: transaction.totalFees,\n        inMessage: serializeMessage(transaction.inMessage),\n        outMessages: transaction.outMessages.map(serializeMessage),\n    };\n}\nexports.serializeTransaction = serializeTransaction;\n/**\n * @category Models\n */\nfunction parseTransaction(transaction) {\n    return {\n        ...transaction,\n        inMessage: parseMessage(transaction.inMessage),\n        outMessages: transaction.outMessages.map(parseMessage),\n    };\n}\nexports.parseTransaction = parseTransaction;\n/**\n * @category Models\n */\nfunction serializeMessage(message) {\n    // NOTE: deep copy to prevent sending objects with prototypes through the channel\n    return {\n        hash: message.hash,\n        src: message.src ? message.src.toString() : undefined,\n        dst: message.dst ? message.dst.toString() : undefined,\n        value: message.value,\n        bounce: message.bounce,\n        bounced: message.bounced,\n        body: message.body,\n        bodyHash: message.bodyHash,\n    };\n}\nexports.serializeMessage = serializeMessage;\n/**\n * @category Models\n */\nfunction parseMessage(message) {\n    return {\n        ...message,\n        src: message.src ? new utils_1.Address(message.src) : undefined,\n        dst: message.dst ? new utils_1.Address(message.dst) : undefined,\n    };\n}\nexports.parseMessage = parseMessage;\n/**\n * @category Models\n */\nfunction parsePermissions(permissions) {\n    return {\n        ...permissions,\n        accountInteraction: permissions.accountInteraction\n            ? parseAccountInteraction(permissions.accountInteraction)\n            : undefined,\n    };\n}\nexports.parsePermissions = parsePermissions;\n/**\n * @category Models\n */\nfunction parseAccountInteraction(accountInteraction) {\n    return {\n        ...accountInteraction,\n        address: new utils_1.Address(accountInteraction.address),\n    };\n}\nexports.parseAccountInteraction = parseAccountInteraction;\n/**\n * @category Models\n */\nfunction serializeTokensObject(object) {\n    return serializeTokenValue(object);\n}\nexports.serializeTokensObject = serializeTokensObject;\nfunction serializeTokenValue(token) {\n    if (typeof token === 'object' && (0, utils_1.isAddressObject)(token)) {\n        return token.toString();\n    }\n    if (Array.isArray(token)) {\n        const result = [];\n        for (const item of token) {\n            result.push(serializeTokenValue(item));\n        }\n        return result;\n    }\n    else if (token != null && typeof token === 'object') {\n        const result = {};\n        for (const [key, value] of Object.entries(token)) {\n            result[key] = serializeTokenValue(value);\n        }\n        return result;\n    }\n    else {\n        return token;\n    }\n}\n/**\n * @category Models\n */\nfunction parseTokensObject(params, object) {\n    const result = {};\n    for (const param of params) {\n        result[param.name] = parseTokenValue(param, object[param.name]);\n    }\n    return result;\n}\nexports.parseTokensObject = parseTokensObject;\n/**\n * @category Models\n */\nfunction parsePartialTokensObject(params, object) {\n    const result = {};\n    for (const param of params) {\n        if (Object.prototype.hasOwnProperty.call(object, param.name)) {\n            result[param.name] = parseTokenValue(param, !object[param.name]);\n        }\n    }\n    return result;\n}\nexports.parsePartialTokensObject = parsePartialTokensObject;\nfunction parseTokenValue(param, token) {\n    if (!param.type.startsWith('map')) {\n        const isArray = param.type.endsWith('[]');\n        const isOptional = !isArray && param.type.startsWith('optional');\n        const rawType = (isArray ? param.type.slice(0, -2) : isOptional ? param.type.slice(9, -1) : param.type);\n        if (isArray) {\n            const rawParam = { name: param.name, type: rawType, components: param.components };\n            const result = [];\n            for (const item of token) {\n                result.push(parseTokenValue(rawParam, item));\n            }\n            return result;\n        }\n        else if (isOptional) {\n            if (token == null) {\n                return null;\n            }\n            else {\n                const rawParam = { name: param.name, type: rawType, components: param.components };\n                return parseTokenValue(rawParam, token);\n            }\n        }\n        else if (rawType === 'tuple') {\n            const result = {};\n            if (param.components != null) {\n                for (const component of param.components) {\n                    result[component.name] = parseTokenValue(component, token[component.name]);\n                }\n            }\n            return result;\n        }\n        else if (rawType === 'address') {\n            return new utils_1.Address(token);\n        }\n        else {\n            return token;\n        }\n    }\n    else {\n        const valueTypeIndex = param.type.indexOf(',');\n        const keyType = param.type.slice(4, valueTypeIndex);\n        const valueType = param.type.slice(valueTypeIndex + 1, -1);\n        const result = [];\n        for (const [key, value] of token) {\n            result.push([\n                parseTokenValue({\n                    name: '',\n                    type: keyType,\n                }, key),\n                parseTokenValue({\n                    name: '',\n                    type: valueType,\n                    components: param.components,\n                }, value),\n            ]);\n        }\n        return result;\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Subscriber = void 0;\nconst utils_1 = require(\"./utils\");\nconst models_1 = require(\"./models\");\n/**\n * @category Stream\n */\nclass Subscriber {\n    constructor(provider) {\n        this.provider = provider;\n        this.subscriptions = new Map();\n        this.scanners = new Map();\n        this.unsubscribe = async () => this._unsubscribe();\n    }\n    /**\n     * Returns a stream of new transactions\n     */\n    transactions(address) {\n        return this._addSubscription('transactionsFound', address, false);\n    }\n    /**\n     * Returns a finite stream of child transactions\n     * @param transaction - root transaction\n     */\n    trace(transaction) {\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const scanner = new TraceTransactionsScanner(this.provider, {\n                origin: transaction,\n                onData,\n                onEnd: (eof) => {\n                    this.scanners.delete(id);\n                    onEnd(eof);\n                },\n            });\n            this.scanners.set(id, scanner);\n            scanner.start();\n            // Subscription is not required\n            return Promise.resolve();\n        }, async () => {\n            const scanner = this.scanners.get(id);\n            if (scanner != null) {\n                this.scanners.delete(id);\n                await scanner.stop();\n            }\n        }, identity, true);\n    }\n    /**\n     * Returns a stream of old transactions\n     */\n    oldTransactions(address, filter) {\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const scanner = new UnorderedTransactionsScanner(this.provider, {\n                address,\n                onData,\n                onEnd: (eof) => {\n                    this.scanners.delete(id);\n                    onEnd(eof);\n                },\n                ...filter,\n            });\n            this.scanners.set(id, scanner);\n            scanner.start();\n            // Subscription is not required\n            return Promise.resolve();\n        }, async () => {\n            const scanner = this.scanners.get(id);\n            if (scanner != null) {\n                this.scanners.delete(id);\n                await scanner.stop();\n            }\n        }, identity, true);\n    }\n    states(address) {\n        return this._addSubscription('contractStateChanged', address, false);\n    }\n    async _unsubscribe() {\n        const tasks = [];\n        for (const item of this.subscriptions.values()) {\n            for (const [event, eventData] of Object.entries(item)) {\n                delete item[event];\n                if (eventData != null) {\n                    tasks.push(eventData.subscription\n                        .then(item => item.unsubscribe())\n                        .catch(() => {\n                    }));\n                }\n            }\n        }\n        this.subscriptions.clear();\n        for (const scanner of this.scanners.values()) {\n            tasks.push(scanner.stop());\n        }\n        this.scanners.clear();\n        await Promise.all(tasks);\n    }\n    _addSubscription(event, address, isFinite) {\n        const rawAddress = address.toString();\n        const stopProducer = (id) => {\n            const subscriptions = this.subscriptions.get(rawAddress);\n            if (subscriptions == null) {\n                // No subscriptions for the address\n                return;\n            }\n            const eventData = subscriptions[event];\n            if (eventData != null) {\n                const handler = eventData.handlers.get(id);\n                if (handler != null) {\n                    // Remove event handler with the id\n                    eventData.handlers.delete(id);\n                    const { queue, onEnd, state } = handler;\n                    if (!state.finished) {\n                        state.finished = true;\n                        queue.clear();\n                        queue.enqueue(async () => onEnd(state.eof));\n                    }\n                }\n                // Remove event data subscription if there are none of them\n                if (eventData.handlers.size === 0) {\n                    const subscription = eventData.subscription;\n                    delete subscriptions[event];\n                    subscription\n                        .then((subscription) => subscription.unsubscribe())\n                        .catch(console.debug);\n                }\n            }\n            // Remove address subscriptions object if it is empty\n            if (subscriptions.contractStateChanged == null && subscriptions.transactionsFound == null) {\n                this.subscriptions.delete(rawAddress);\n            }\n        };\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const subscriptions = this.subscriptions.get(rawAddress);\n            let eventData = subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions[event];\n            const state = { eof: false, finished: false };\n            // Create handler object\n            const handler = {\n                onData,\n                onEnd,\n                queue: new PromiseQueue(),\n                state,\n            };\n            if (eventData != null) {\n                // Add handler if there is already a handler group\n                eventData.handlers.set(id, handler);\n                return Promise.resolve();\n            }\n            // Create handlers group\n            const handlers = new Map();\n            handlers.set(id, handler);\n            // Create subscription\n            const subscription = this.provider.subscribe(event, { address })\n                .then((subscription) => {\n                subscription.on('data', (data) => {\n                    for (const { onData, queue, state } of handlers.values()) {\n                        // Skip closed streams\n                        if (state.eof || state.finished) {\n                            continue;\n                        }\n                        queue.enqueue(async () => {\n                            if (!(await onData(data))) {\n                                state.eof = true;\n                                stopProducer(id);\n                            }\n                        });\n                    }\n                });\n                subscription.on('unsubscribed', () => {\n                    for (const id of handlers.keys()) {\n                        stopProducer(id);\n                    }\n                });\n                return subscription;\n            }).catch((e) => {\n                console.error(e);\n                for (const id of handlers.keys()) {\n                    stopProducer(id);\n                }\n                throw e;\n            });\n            // Add event data to subscriptions\n            eventData = { subscription, handlers };\n            if (subscriptions == null) {\n                this.subscriptions.set(rawAddress, { [event]: eventData });\n            }\n            else {\n                subscriptions[event] = eventData;\n            }\n            // Wait until subscribed\n            return subscription.then(() => {\n            });\n        }, () => stopProducer(id), identity, isFinite);\n    }\n}\nexports.Subscriber = Subscriber;\nasync function identity(item, handler) {\n    return handler(item);\n}\nclass StreamImpl {\n    constructor(makeProducer, stopProducer, extractor, isFinite) {\n        this.makeProducer = makeProducer;\n        this.stopProducer = stopProducer;\n        this.extractor = extractor;\n        this.isFinite = isFinite;\n        /**\n         * Folds every element into an accumulator by applying an operation, returning the final result\n         */\n        this.fold = this.onlyFinite((init, f, ctx) => {\n            let state = init;\n            return new Promise((resolve, reject) => {\n                const subscribed = this.makeProducer(\n                // onData\n                (data) => this.extractor(data, async (item) => {\n                    state = await f(state, item);\n                    return true;\n                }), \n                // onEnd\n                (eof) => {\n                    if (eof) {\n                        resolve(state);\n                    }\n                    else {\n                        reject(new Error('Subscription closed'));\n                    }\n                });\n                if (ctx != null) {\n                    ctx.subscribed = subscribed;\n                }\n            });\n        });\n        /**\n         * Waits until the end of the stream\n         */\n        this.finished = this.onlyFinite((ctx) => {\n            return new Promise((resolve, reject) => {\n                const subscribed = this.makeProducer(\n                // onData\n                (data) => this.extractor(data, (_item) => true), \n                // onEnd\n                (eof) => {\n                    if (eof) {\n                        resolve(undefined);\n                    }\n                    else {\n                        reject(new Error('Subscription closed'));\n                    }\n                });\n                if (ctx != null) {\n                    ctx.subscribed = subscribed;\n                }\n            });\n        });\n    }\n    async delayed(f) {\n        const { subscribed, result } = f({\n            first: (() => {\n                const ctx = {};\n                const result = this.first(ctx);\n                return { subscribed: ctx.subscribed, result };\n            }),\n            on: (handler) => {\n                const ctx = {};\n                this.on(handler, ctx);\n                return { subscribed: ctx.subscribed, result: undefined };\n            },\n            fold: this.fold != null ? (init, f) => {\n                const ctx = {};\n                const result = this.fold(init, f, ctx);\n                return { subscribed: ctx.subscribed, result };\n            } : undefined,\n            finished: this.finished != null ? () => {\n                const ctx = {};\n                const result = this.finished(ctx);\n                return { subscribed: ctx.subscribed, result };\n            } : undefined,\n        });\n        await subscribed;\n        return () => result;\n    }\n    first(ctx) {\n        const state = { found: false };\n        return new Promise((resolve, reject) => {\n            const subscribed = this.makeProducer(\n            // onData\n            (data) => this.extractor(data, (item) => {\n                Object.assign(state, { found: true, result: item });\n                return false;\n            }), \n            // onEnd\n            (eof) => {\n                if (eof) {\n                    if (this.isFinite) {\n                        resolve((state.found ? state.result : undefined));\n                    }\n                    else if (state.found) {\n                        resolve(state.result);\n                    }\n                    else {\n                        reject(new Error('Unexpected end of stream'));\n                    }\n                }\n                else {\n                    reject(new Error('Subscription closed'));\n                }\n            });\n            if (ctx != null) {\n                ctx.subscribed = subscribed;\n            }\n        });\n    }\n    on(handler, ctx) {\n        const subscribed = this.makeProducer((event) => this.extractor(event, async (item) => {\n            await handler(item);\n            return true;\n        }), (_eof) => {\n        });\n        if (ctx != null) {\n            ctx.subscribed = subscribed;\n        }\n    }\n    merge(other) {\n        return new StreamImpl((onData, onEnd) => {\n            const state = {\n                stopped: false,\n                counter: 0,\n            };\n            const checkEnd = (eof) => {\n                if (state.stopped) {\n                    return;\n                }\n                if (++state.counter == 2 || !eof) {\n                    state.stopped = true;\n                    onEnd(eof);\n                }\n            };\n            return Promise.all([\n                this.makeProducer(onData, checkEnd),\n                other.makeProducer(onData, checkEnd),\n            ]).then(() => {\n            });\n        }, () => {\n            this.stopProducer();\n            other.stopProducer();\n        }, this.extractor, (this.isFinite && other.isFinite));\n    }\n    enumerate() {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            return handler({\n                index: state.index++,\n                item,\n            });\n        }), this.isFinite);\n    }\n    tap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            await f(item);\n            return handler(item);\n        }), this.isFinite);\n    }\n    filter(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (await f(item)) {\n                return handler(item);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    filterMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            if (newItem !== undefined) {\n                return handler(newItem);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    map(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            return handler(newItem);\n        }), this.isFinite);\n    }\n    flatMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const items = await f(item);\n            for (const newItem of items) {\n                if (!(await handler(newItem))) {\n                    return false;\n                }\n            }\n            return true;\n        }), this.isFinite);\n    }\n    skip(n) {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, (item) => {\n            if (state.index >= n) {\n                return handler(item);\n            }\n            else {\n                ++state.index;\n                return true;\n            }\n        }), this.isFinite);\n    }\n    skipWhile(f) {\n        const state = {\n            shouldSkip: true,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (!state.shouldSkip || !(await f(item))) {\n                state.shouldSkip = false;\n                return handler(item);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    take(n) {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, (item) => {\n            if (state.index < n) {\n                ++state.index;\n                return handler(item);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    takeWhile(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (await f(item)) {\n                return handler(item);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    takeWhileMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            if (newItem !== undefined) {\n                return handler(newItem);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    onlyFinite(f) {\n        if (this.isFinite) {\n            return f;\n        }\n        else {\n            return undefined;\n        }\n    }\n}\nclass UnorderedTransactionsScanner {\n    constructor(provider, params) {\n        this.provider = provider;\n        this.params = params;\n        this.queue = new PromiseQueue();\n        this.isRunning = false;\n    }\n    start() {\n        if (this.isRunning || this.promise != null) {\n            return;\n        }\n        this.isRunning = true;\n        this.promise = (async () => {\n            const params = this.params;\n            const state = {\n                complete: false,\n            };\n            while (this.isRunning && !state.complete) {\n                try {\n                    const { transactions, continuation } = await this.provider.getTransactions({\n                        address: this.params.address,\n                        continuation: this.continuation,\n                    });\n                    state.complete = !state.complete && transactions.length == null;\n                    if (!this.isRunning || state.complete) {\n                        break;\n                    }\n                    const filteredTransactions = transactions.filter((item) => ((params.fromLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, params.fromLt) > 0) &&\n                        (params.fromUtime == null || item.createdAt > params.fromUtime)));\n                    if (filteredTransactions.length == 0) {\n                        state.complete = true;\n                        break;\n                    }\n                    const info = {\n                        maxLt: filteredTransactions[0].id.lt,\n                        minLt: filteredTransactions[filteredTransactions.length - 1].id.lt,\n                        batchType: 'old',\n                    };\n                    this.queue.enqueue(async () => {\n                        const isRunning = await this.params.onData({\n                            address: this.params.address,\n                            transactions: filteredTransactions,\n                            info,\n                        });\n                        if (!isRunning) {\n                            state.complete = true;\n                            this.isRunning = false;\n                        }\n                    });\n                    if (continuation != null) {\n                        this.continuation = continuation;\n                    }\n                    else {\n                        state.complete = true;\n                        break;\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            }\n            this.queue.enqueue(async () => this.params.onEnd(state.complete));\n            this.isRunning = false;\n            this.continuation = undefined;\n        })();\n    }\n    async stop() {\n        this.isRunning = false;\n        this.queue.clear();\n        if (this.promise != null) {\n            await this.promise;\n        }\n        else {\n            this.params.onEnd(false);\n        }\n    }\n}\nclass TraceTransactionsScanner {\n    constructor(provider, params) {\n        this.provider = provider;\n        this.params = params;\n        this.queue = new PromiseQueue();\n        this.isRunning = false;\n        this.semaphore = new utils_1.Semaphore(10);\n    }\n    start() {\n        if (this.isRunning || this.promise != null) {\n            return;\n        }\n        const provider = this.provider;\n        this.isRunning = true;\n        this.promise = (async () => {\n            const state = {\n                complete: false,\n            };\n            const makePendingTransaction = (messageHash) => {\n                const state = { stopped: false };\n                const promise = (async () => {\n                    let timeout = 500;\n                    while (true) {\n                        const release = await this.semaphore.acquire();\n                        if (state.stopped) {\n                            release();\n                            return;\n                        }\n                        const result = await provider.rawApi.findTransaction({\n                            inMessageHash: messageHash,\n                        }).catch(() => ({ transaction: undefined })).finally(() => release());\n                        if (state.stopped) {\n                            return;\n                        }\n                        if (result.transaction != null) {\n                            const transaction = (0, models_1.parseTransaction)(result.transaction);\n                            transaction.account = transaction.inMessage.dst;\n                            return transaction;\n                        }\n                        let resolve;\n                        const promise = new Promise((resolvePromise, rejectPromise) => {\n                            resolve = () => resolvePromise();\n                            state.reject = () => rejectPromise();\n                        });\n                        state.timeout = setTimeout(resolve, timeout);\n                        await promise;\n                        if (state.stopped) {\n                            return;\n                        }\n                        state.reject = undefined;\n                        timeout = Math.min(timeout * 2, 3000);\n                    }\n                })();\n                const reject = () => {\n                    var _a;\n                    state.stopped = true;\n                    (_a = state.reject) === null || _a === void 0 ? void 0 : _a.call(state);\n                    if (state.timeout != null) {\n                        clearTimeout(state.timeout);\n                    }\n                };\n                return { promise, reject };\n            };\n            const transactionsQueue = [this.params.origin];\n            try {\n                outer: while (this.isRunning) {\n                    const transaction = transactionsQueue.shift();\n                    if (transaction == null) {\n                        state.complete = true;\n                        break;\n                    }\n                    // Spawn promises\n                    const pendingTransactions = transaction\n                        .outMessages\n                        .filter((message) => message.dst != null)\n                        .map((message) => {\n                        const messageHash = message.hash;\n                        return makePendingTransaction(messageHash);\n                    });\n                    this.pendingTransactions = pendingTransactions;\n                    for (const { promise } of pendingTransactions) {\n                        const childTransaction = await promise;\n                        if (!this.isRunning || state.complete || childTransaction == null) {\n                            break outer;\n                        }\n                        this.queue.enqueue(async () => {\n                            const isRunning = await this.params.onData(childTransaction);\n                            if (!isRunning) {\n                                state.complete = true;\n                                this.isRunning = false;\n                                this.rejectPendingTransactions();\n                            }\n                        });\n                        transactionsQueue.push(childTransaction);\n                    }\n                    this.pendingTransactions = undefined;\n                }\n            }\n            catch (e) {\n                console.error(e);\n                /* do nothing */\n            }\n            finally {\n                this.queue.enqueue(async () => this.params.onEnd(state.complete));\n                this.isRunning = false;\n                this.rejectPendingTransactions();\n            }\n        })();\n    }\n    async stop() {\n        this.isRunning = false;\n        this.queue.clear();\n        this.rejectPendingTransactions();\n        if (this.promise != null) {\n            await this.promise;\n        }\n        else {\n            this.params.onEnd(false);\n        }\n    }\n    rejectPendingTransactions() {\n        if (this.pendingTransactions != null) {\n            for (const pendingTransaction of this.pendingTransactions) {\n                pendingTransaction.reject();\n            }\n            this.pendingTransactions = undefined;\n        }\n        this.semaphore.releaseAll();\n    }\n}\nclass PromiseQueue {\n    constructor() {\n        this.queue = [];\n        this.workingOnPromise = false;\n    }\n    enqueue(promise) {\n        this.queue.push(promise);\n        this._dequeue().catch(() => {\n        });\n    }\n    clear() {\n        this.queue.length = 0;\n    }\n    async _dequeue() {\n        if (this.workingOnPromise) {\n            return;\n        }\n        const item = this.queue.shift();\n        if (!item) {\n            return;\n        }\n        this.workingOnPromise = true;\n        item()\n            .then(() => {\n            this.workingOnPromise = false;\n            this._dequeue();\n        })\n            .catch(() => {\n            this.workingOnPromise = false;\n            this._dequeue();\n        });\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TvmException = exports.Contract = void 0;\nconst utils_1 = require(\"./utils\");\nconst models_1 = require(\"./models\");\n/**\n * @category Contract\n */\nclass Contract {\n    constructor(provider, abi, address) {\n        if (!Array.isArray(abi.functions)) {\n            throw new Error('Invalid abi. Functions array required');\n        }\n        if (!Array.isArray(abi.events)) {\n            throw new Error('Invalid abi. Events array required');\n        }\n        this._provider = provider;\n        this._abi = JSON.stringify(abi);\n        this.methodsAbi = abi.functions.reduce((functions, item) => {\n            if (item.inputs == null) {\n                item.inputs = [];\n            }\n            if (item.outputs == null) {\n                item.outputs = [];\n            }\n            functions[item.name] = item;\n            return functions;\n        }, {});\n        this.eventsAbi = abi.events.reduce((events, item) => {\n            if (item.inputs == null) {\n                item.inputs = [];\n            }\n            events[item.name] = item;\n            return events;\n        }, {});\n        this.fieldsAbi = abi.fields;\n        this._address = address;\n        this._methods = new Proxy({}, {\n            get: (_object, method) => {\n                const rawAbi = this.methodsAbi[method];\n                return (params = {}) => new ContractMethodImpl(this._provider, rawAbi, this._abi, this._address, method, params);\n            },\n        });\n        this._fields = new Proxy({}, {\n            get: (_object, field) => {\n                return async (params = {}) => {\n                    await this._provider.ensureInitialized();\n                    const { fields, state } = await this._provider.rawApi.getContractFields({\n                        address: this._address.toString(),\n                        abi: this._abi,\n                        cachedState: params === null || params === void 0 ? void 0 : params.cachedState,\n                        allowPartial: (params === null || params === void 0 ? void 0 : params.allowPartial) == null ? false : params.allowPartial,\n                    });\n                    if (fields == null) {\n                        if (state == null) {\n                            throw new Error('Account does not exist');\n                        }\n                        else if (!state.isDeployed) {\n                            throw new Error('Account is not deployed');\n                        }\n                        else {\n                            throw new Error('Invalid account data');\n                        }\n                    }\n                    const parsedFields = (0, models_1.parseTokensObject)(this.fieldsAbi, fields);\n                    if (parsedFields == null || !Object.prototype.hasOwnProperty.call(parsedFields, field)) {\n                        throw new Error('Unknown field');\n                    }\n                    return parsedFields[field];\n                };\n            },\n        });\n    }\n    get methods() {\n        return this._methods;\n    }\n    get fields() {\n        return this._fields;\n    }\n    get address() {\n        return this._address;\n    }\n    get abi() {\n        return this._abi;\n    }\n    /**\n     * Requests contract data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFullState() {\n        await this._provider.ensureInitialized();\n        return (await this._provider.rawApi.getFullContractState({\n            address: this.address.toString(),\n        }));\n    }\n    /**\n     * Unpacks all fields from the contract state using the specified ABI\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFields(args = {}) {\n        await this._provider.ensureInitialized();\n        const { fields, state } = await this._provider.rawApi.getContractFields({\n            address: this.address.toString(),\n            abi: this._abi,\n            cachedState: args.cachedState,\n            allowPartial: args.allowPartial == null ? false : args.allowPartial,\n        });\n        return {\n            fields: fields != null ? (0, models_1.parseTokensObject)(this.fieldsAbi, fields) : undefined,\n            state,\n        };\n    }\n    /**\n     * Creates new contract transactions stream\n     *\n     * @param subscriber\n     */\n    transactions(subscriber) {\n        return subscriber.transactions(this._address).flatMap(({ transactions }) => transactions);\n    }\n    /**\n     * Creates new contract events stream\n     *\n     * @param subscriber\n     */\n    events(subscriber) {\n        return subscriber\n            .transactions(this._address)\n            .flatMap(({ transactions }) => transactions)\n            .flatMap(tx => this.decodeTransactionEvents({ transaction: tx }).then(events => {\n            events.forEach(event => (event.transaction = tx));\n            return events;\n        }));\n    }\n    async waitForEvent(args = {}) {\n        const { range, filter } = args;\n        const filterFn = typeof filter === 'string'\n            ? ({ event }) => event === filter\n            : filter;\n        let subscriber = args.subscriber;\n        const hasTempSubscriber = subscriber == null;\n        if (subscriber == null) {\n            subscriber = new this._provider.Subscriber();\n        }\n        const event = await ((range === null || range === void 0 ? void 0 : range.fromLt) != null || (range === null || range === void 0 ? void 0 : range.fromUtime) != null\n            ? subscriber.oldTransactions(this._address, range).merge(subscriber.transactions(this._address))\n            : subscriber.transactions(this.address))\n            .flatMap(item => item.transactions)\n            .takeWhile(item => range == null ||\n            ((range.fromLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.fromLt) > 0) &&\n                (range.fromUtime == null || item.createdAt > range.fromUtime) &&\n                (range.toLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.toLt) < 0) &&\n                (range.toUtime == null || item.createdAt < range.toUtime)))\n            .flatMap(tx => this.decodeTransactionEvents({ transaction: tx }).then(events => {\n            events.forEach(event => (event.transaction = tx));\n            return events;\n        }))\n            .filterMap(async (event) => {\n            if (filterFn == null || (await filterFn(event))) {\n                return event;\n            }\n            else {\n                return undefined;\n            }\n        })\n            .first();\n        hasTempSubscriber && (await subscriber.unsubscribe());\n        return event;\n    }\n    async getPastEvents(args) {\n        const { range, filter, limit } = args;\n        const filterFn = typeof filter === 'string'\n            ? ({ event }) => event === filter\n            : filter;\n        const result = [];\n        let currentContinuation = args === null || args === void 0 ? void 0 : args.continuation;\n        outer: while (true) {\n            const { transactions, continuation } = await this._provider.getTransactions({\n                address: this._address,\n                continuation: currentContinuation,\n            });\n            if (transactions.length === null) {\n                break;\n            }\n            const filteredTransactions = transactions.filter(item => ((range === null || range === void 0 ? void 0 : range.fromLt) == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.fromLt) > 0) &&\n                ((range === null || range === void 0 ? void 0 : range.fromUtime) == null || item.createdAt > range.fromUtime) &&\n                ((range === null || range === void 0 ? void 0 : range.toLt) == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.toLt) < 0) &&\n                ((range === null || range === void 0 ? void 0 : range.toUtime) == null || item.createdAt < range.toUtime));\n            if (filteredTransactions.length > 0) {\n                const parsedEvents = await Promise.all(filteredTransactions.map(async (tx) => {\n                    return {\n                        tx,\n                        events: await this.decodeTransactionEvents({ transaction: tx }).then(events => {\n                            events.forEach(event => (event.transaction = tx));\n                            return events;\n                        }),\n                    };\n                }));\n                for (let { tx, events } of parsedEvents) {\n                    if (filterFn != null) {\n                        events = await Promise.all(events.map(async (event) => ((await filterFn(event)) ? event : undefined))).then(events => events.filter((event) => event != null));\n                    }\n                    currentContinuation = tx.id; // update continuation in case of early break\n                    for (const event of events) {\n                        if (limit != null && result.length >= limit) {\n                            break outer;\n                        }\n                        result.push(event);\n                    }\n                    if (limit != null && result.length >= limit) {\n                        break outer;\n                    }\n                }\n            }\n            currentContinuation = continuation;\n            if (currentContinuation == null) {\n                break;\n            }\n        }\n        return { events: result, continuation: currentContinuation };\n    }\n    async decodeTransaction(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeTransaction({\n                transaction: (0, models_1.serializeTransaction)(args.transaction),\n                abi: this._abi,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, input, output } = result;\n            const rawAbi = this.methodsAbi[method];\n            return {\n                method,\n                input: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, input) : {},\n                output: rawAbi.outputs != null ? (0, models_1.parseTokensObject)(rawAbi.outputs, output) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeTransactionEvents(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const { events } = await this._provider.rawApi.decodeTransactionEvents({\n                transaction: (0, models_1.serializeTransaction)(args.transaction),\n                abi: this._abi,\n            });\n            const result = [];\n            for (const { event, data } of events) {\n                const rawAbi = this.eventsAbi[event];\n                result.push({\n                    event,\n                    data: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, data) : {},\n                });\n            }\n            return result;\n        }\n        catch (_) {\n            return [];\n        }\n    }\n    async decodeInputMessage(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeInput({\n                abi: this._abi,\n                body: args.body,\n                internal: args.internal,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, input } = result;\n            const rawAbi = this.methodsAbi[method];\n            return {\n                method,\n                input: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, input) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeOutputMessage(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeOutput({\n                abi: this._abi,\n                body: args.body,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, output } = result;\n            const rawAbi = this.methodsAbi[method];\n            return {\n                method,\n                output: rawAbi.outputs != null ? (0, models_1.parseTokensObject)(rawAbi.outputs, output) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeEvent(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeEvent({\n                abi: this.abi,\n                body: args.body,\n                event: args.events,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { event, data } = result;\n            const rawAbi = this.eventsAbi[event];\n            return {\n                event,\n                data: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, data) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n}\nexports.Contract = Contract;\n/**\n * @category Contract\n */\nclass TvmException extends Error {\n    constructor(code) {\n        super(`TvmException: ${code}`);\n        this.code = code;\n    }\n}\nexports.TvmException = TvmException;\nclass ContractMethodImpl {\n    constructor(provider, functionAbi, abi, address, method, params) {\n        this.provider = provider;\n        this.functionAbi = functionAbi;\n        this.abi = abi;\n        this.address = address;\n        this.method = method;\n        this.params = (0, models_1.serializeTokensObject)(params);\n    }\n    async send(args) {\n        await this.provider.ensureInitialized();\n        const { transaction } = await this.provider.rawApi.sendMessage({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            bounce: args.bounce == null ? true : args.bounce,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n            stateInit: args.stateInit,\n        });\n        return (0, models_1.parseTransaction)(transaction);\n    }\n    async sendDelayed(args) {\n        await this.provider.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions();\n        const subscription = await this.provider.subscribe('messageStatusUpdated');\n        subscription.on('data', data => {\n            if (!data.address.equals(args.from)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this.provider.rawApi\n            .sendMessageDelayed({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            bounce: args.bounce == null ? true : args.bounce,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n            stateInit: args.stateInit,\n        })\n            .catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(this.address, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    async sendWithResult(args) {\n        await this.provider.ensureInitialized();\n        let subscriber = args.subscriber;\n        const hasTempSubscriber = subscriber == null;\n        if (subscriber == null) {\n            subscriber = new this.provider.Subscriber();\n        }\n        try {\n            // Parent transaction from wallet\n            let parentTransaction = undefined;\n            // Child transaction promise\n            let resolveChildTransactionPromise;\n            const childTransactionPromise = new Promise(resolve => {\n                resolveChildTransactionPromise = tx => resolve(tx);\n            });\n            // Array for collecting transactions on target before parent transaction promise resolution\n            const possibleChildren = [];\n            // Subscribe to this account\n            subscriber\n                .transactions(this.address)\n                .flatMap(batch => batch.transactions)\n                // Listen only messages from sender\n                .filter(item => { var _a; return ((_a = item.inMessage.src) === null || _a === void 0 ? void 0 : _a.equals(args.from)) || false; })\n                .on(tx => {\n                if (parentTransaction == null) {\n                    // If we don't known whether the message was sent just collect all transactions from the sender\n                    possibleChildren.push(tx);\n                }\n                else if (parentTransaction.possibleMessages.findIndex(msg => msg.hash == tx.inMessage.hash) >= 0) {\n                    // Resolve promise if transaction was found\n                    resolveChildTransactionPromise === null || resolveChildTransactionPromise === void 0 ? void 0 : resolveChildTransactionPromise(tx);\n                }\n            });\n            // Send message\n            const transaction = await this.send(args);\n            // Extract all outgoing messages from the parent transaction to this contract\n            const possibleMessages = transaction.outMessages.filter(msg => { var _a; return ((_a = msg.dst) === null || _a === void 0 ? void 0 : _a.equals(this.address)) || false; });\n            // Update stream state\n            parentTransaction = {\n                transaction,\n                possibleMessages,\n            };\n            // Check whether child transaction was already found\n            const alreadyReceived = possibleChildren.find(tx => {\n                return possibleMessages.findIndex(msg => msg.hash == tx.inMessage.hash) >= 0;\n            });\n            if (alreadyReceived != null) {\n                resolveChildTransactionPromise === null || resolveChildTransactionPromise === void 0 ? void 0 : resolveChildTransactionPromise(alreadyReceived);\n            }\n            const childTransaction = await childTransactionPromise;\n            // Parse output\n            let output = undefined;\n            try {\n                const result = await this.provider.rawApi.decodeTransaction({\n                    transaction: (0, models_1.serializeTransaction)(childTransaction),\n                    abi: this.abi,\n                    method: this.method,\n                });\n                if (result != null) {\n                    output = this.functionAbi.outputs != null ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, result.output) : {};\n                }\n            }\n            catch (e) {\n                console.error(e);\n            }\n            // Done\n            return {\n                parentTransaction: parentTransaction.transaction,\n                childTransaction,\n                output,\n            };\n        }\n        finally {\n            hasTempSubscriber && (await subscriber.unsubscribe());\n        }\n    }\n    async estimateFees(args) {\n        await this.provider.ensureInitialized();\n        const { fees } = await this.provider.rawApi.estimateFees({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n            stateInit: args.stateInit,\n        });\n        return fees;\n    }\n    async sendExternal(args) {\n        await this.provider.ensureInitialized();\n        const method = args.withoutSignature === true\n            ? this.provider.rawApi.sendUnsignedExternalMessage\n            : this.provider.rawApi.sendExternalMessage;\n        const { transaction, output } = await method({\n            publicKey: args.publicKey,\n            recipient: this.address.toString(),\n            stateInit: args.stateInit,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n            local: args.local,\n            executorParams: args.executorParams\n                ? {\n                    disableSignatureCheck: args.executorParams.disableSignatureCheck,\n                    overrideBalance: args.executorParams.overrideBalance,\n                }\n                : undefined,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n            output: output != null ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, output) : undefined,\n        };\n    }\n    async sendExternalDelayed(args) {\n        await this.provider.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions();\n        const subscription = await this.provider.subscribe('messageStatusUpdated');\n        subscription.on('data', data => {\n            if (!data.address.equals(this.address)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this.provider.rawApi\n            .sendExternalMessageDelayed({\n            publicKey: args.publicKey,\n            recipient: this.address.toString(),\n            stateInit: args.stateInit,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        })\n            .catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(this.address, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    async call(args = {}) {\n        await this.provider.ensureInitialized();\n        const { output, code } = await this.provider.rawApi.runLocal({\n            address: this.address.toString(),\n            cachedState: args.cachedState,\n            responsible: args.responsible,\n            functionCall: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        });\n        if (output == null || code != 0) {\n            throw new TvmException(code);\n        }\n        else {\n            return (0, models_1.parseTokensObject)(this.functionAbi.outputs, output);\n        }\n    }\n    /**\n     * Encodes this method as an external message and\n     * executes all transaction phases locally, producing a new state\n     */\n    async executeExternal(args) {\n        await this.provider.ensureInitialized();\n        const { transaction, newState, output } = await this.provider.rawApi.executeLocal({\n            address: this.address.toString(),\n            cachedState: args.cachedState,\n            stateInit: args.stateInit,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n            messageHeader: {\n                type: 'external',\n                publicKey: args.publicKey,\n                withoutSignature: args.withoutSignature,\n            },\n            executorParams: args.executorParams != null\n                ? {\n                    disableSignatureCheck: args.executorParams.disableSignatureCheck,\n                    overrideBalance: args.executorParams.overrideBalance,\n                }\n                : undefined,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n            newState,\n            output: output !== undefined ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, output) : undefined,\n        };\n    }\n    /**\n     * Encodes this method as an internal message and\n     * executes all transaction phases locally, producing a new state\n     */\n    async executeInternal(args) {\n        await this.provider.ensureInitialized();\n        const { transaction, newState, output } = await this.provider.rawApi.executeLocal({\n            address: this.address.toString(),\n            cachedState: args.cachedState,\n            stateInit: args.stateInit,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n            messageHeader: {\n                type: 'internal',\n                sender: args.sender.toString(),\n                amount: args.amount,\n                bounce: args.bounce != null ? args.bounce : false,\n                bounced: args.bounced,\n            },\n            executorParams: args.executorParams != null\n                ? {\n                    disableSignatureCheck: args.executorParams.disableSignatureCheck,\n                    overrideBalance: args.executorParams.overrideBalance,\n                }\n                : undefined,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n            newState,\n            output: output !== undefined ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, output) : undefined,\n        };\n    }\n    async encodeInternal() {\n        await this.provider.ensureInitialized();\n        const { boc } = await this.provider.rawApi.encodeInternalInput({\n            abi: this.abi,\n            method: this.method,\n            params: this.params,\n        });\n        return boc;\n    }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProviderNotInitializedException = exports.ProviderNotFoundException = exports.ProviderRpcClient = exports.hasEverscaleProvider = exports.LT_COLLATOR = exports.isAddressObject = exports.mergeTransactions = exports.MessageExpiredException = exports.AddressLiteral = exports.Address = exports.Subscriber = void 0;\nconst models_1 = require(\"./models\");\nconst utils_1 = require(\"./utils\");\nconst subscriber = __importStar(require(\"./stream\"));\nconst contract = __importStar(require(\"./contract\"));\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./models\"), exports);\n__exportStar(require(\"./contract\"), exports);\nvar stream_1 = require(\"./stream\");\nObject.defineProperty(exports, \"Subscriber\", { enumerable: true, get: function () { return stream_1.Subscriber; } });\nvar utils_2 = require(\"./utils\");\nObject.defineProperty(exports, \"Address\", { enumerable: true, get: function () { return utils_2.Address; } });\nObject.defineProperty(exports, \"AddressLiteral\", { enumerable: true, get: function () { return utils_2.AddressLiteral; } });\nObject.defineProperty(exports, \"MessageExpiredException\", { enumerable: true, get: function () { return utils_2.MessageExpiredException; } });\nObject.defineProperty(exports, \"mergeTransactions\", { enumerable: true, get: function () { return utils_2.mergeTransactions; } });\nObject.defineProperty(exports, \"isAddressObject\", { enumerable: true, get: function () { return utils_2.isAddressObject; } });\nObject.defineProperty(exports, \"LT_COLLATOR\", { enumerable: true, get: function () { return utils_2.LT_COLLATOR; } });\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nlet ensurePageLoaded;\nif (!isBrowser || document.readyState === 'complete') {\n    ensurePageLoaded = Promise.resolve();\n}\nelse {\n    ensurePageLoaded = new Promise(resolve => {\n        window.addEventListener('load', () => {\n            resolve();\n        });\n    });\n}\nconst getProvider = () => (isBrowser ? window.__ever || window.ton : undefined);\n/**\n * @category Provider\n */\nasync function hasEverscaleProvider() {\n    if (!isBrowser) {\n        return false;\n    }\n    await ensurePageLoaded;\n    return window.__hasEverscaleProvider === true || window.hasTonProvider === true;\n}\nexports.hasEverscaleProvider = hasEverscaleProvider;\n/**\n * @category Provider\n */\nclass ProviderRpcClient {\n    constructor(properties = {}) {\n        this._subscriptions = {\n            connected: new Map(),\n            disconnected: new Map(),\n            transactionsFound: new Map(),\n            contractStateChanged: new Map(),\n            messageStatusUpdated: new Map(),\n            networkChanged: new Map(),\n            permissionsChanged: new Map(),\n            loggedOut: new Map(),\n        };\n        this._contractSubscriptions = new Map();\n        this._properties = properties;\n        const self = this;\n        // Create contract proxy type\n        class ProviderContract extends contract.Contract {\n            constructor(abi, address) {\n                super(self, abi, address);\n            }\n        }\n        this.Contract = ProviderContract;\n        // Create subscriber proxy type\n        class ProviderSubscriber extends subscriber.Subscriber {\n            constructor() {\n                super(self);\n            }\n        }\n        this.Subscriber = ProviderSubscriber;\n        // Wrap provider requests\n        this._api = new Proxy({}, {\n            get: (_object, method) => (params) => {\n                if (this._provider != null) {\n                    return this._provider.request({ method, params });\n                }\n                else {\n                    throw new ProviderNotInitializedException();\n                }\n            },\n        });\n        if (properties.forceUseFallback === true) {\n            this._initializationPromise =\n                properties.fallback != null\n                    ? properties.fallback().then(provider => {\n                        this._provider = provider;\n                    })\n                    : Promise.resolve();\n        }\n        else {\n            // Initialize provider with injected object by default\n            this._provider = getProvider();\n            if (this._provider != null) {\n                // Provider as already injected\n                this._initializationPromise = Promise.resolve();\n            }\n            else {\n                // Wait until page is loaded and initialization complete\n                this._initializationPromise = hasEverscaleProvider()\n                    .then(hasProvider => new Promise(resolve => {\n                    if (!hasProvider) {\n                        // Fully loaded page doesn't even contain provider flag\n                        return resolve();\n                    }\n                    // Wait injected provider initialization otherwise\n                    this._provider = getProvider();\n                    if (this._provider != null) {\n                        resolve();\n                    }\n                    else {\n                        const eventName = window.__hasEverscaleProvider === true ? 'ever#initialized' : 'ton#initialized';\n                        window.addEventListener(eventName, _ => {\n                            this._provider = getProvider();\n                            resolve();\n                        });\n                    }\n                }))\n                    .then(async () => {\n                    if (this._provider == null && properties.fallback != null) {\n                        this._provider = await properties.fallback();\n                    }\n                });\n            }\n        }\n        // Will only register handlers for successfully loaded injected provider\n        this._initializationPromise.then(() => {\n            if (this._provider != null) {\n                this._registerEventHandlers(this._provider);\n            }\n        });\n    }\n    /**\n     * Checks whether this page has injected Everscale provider or\n     * there is a fallback provider.\n     */\n    async hasProvider() {\n        if (this._properties.fallback != null) {\n            return true;\n        }\n        return hasEverscaleProvider();\n    }\n    /**\n     * Waits until provider api will be available. Calls `fallback` if no provider was found\n     *\n     * @throws ProviderNotFoundException when no provider found\n     */\n    async ensureInitialized() {\n        await this._initializationPromise;\n        if (this._provider == null) {\n            throw new ProviderNotFoundException();\n        }\n    }\n    /**\n     * Whether provider api is ready\n     */\n    get isInitialized() {\n        return this._provider != null;\n    }\n    /**\n     * Raw provider\n     */\n    get raw() {\n        if (this._provider != null) {\n            return this._provider;\n        }\n        else {\n            throw new ProviderNotInitializedException();\n        }\n    }\n    /**\n     * Raw provider api\n     */\n    get rawApi() {\n        return this._api;\n    }\n    /**\n     * Creates typed contract wrapper.\n     *\n     * @param abi Readonly object (must be declared with `as const`)\n     * @param address Default contract address\n     *\n     * @deprecated `new ever.Contract(abi, address)` should be used instead\n     */\n    createContract(abi, address) {\n        return new this.Contract(abi, address);\n    }\n    /**\n     * Creates subscriptions group\n     *\n     * @deprecated `new ever.Subscriber()` should be used instead\n     */\n    createSubscriber() {\n        return new this.Subscriber();\n    }\n    /**\n     * Requests new permissions for current origin.\n     * Shows an approval window to the user.\n     * Will overwrite already existing permissions\n     *\n     * ---\n     * Required permissions: none\n     */\n    async requestPermissions(args) {\n        await this.ensureInitialized();\n        const result = await this._api.requestPermissions({\n            permissions: args.permissions,\n        });\n        return (0, models_1.parsePermissions)(result);\n    }\n    /**\n     * Updates `accountInteraction` permission value\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async changeAccount() {\n        await this.ensureInitialized();\n        await this._api.changeAccount();\n    }\n    /**\n     * Removes all permissions for current origin and stops all subscriptions\n     */\n    async disconnect() {\n        await this.ensureInitialized();\n        await this._api.disconnect();\n    }\n    async subscribe(eventName, params) {\n        class SubscriptionImpl {\n            constructor(_subscribe, _unsubscribe) {\n                this._subscribe = _subscribe;\n                this._unsubscribe = _unsubscribe;\n                this._listeners = {\n                    data: [],\n                    subscribed: [],\n                    unsubscribed: [],\n                };\n                this._subscribed = false;\n                this.subscribe = async () => {\n                    if (this._subscribed) {\n                        return;\n                    }\n                    this._subscribed = true;\n                    await this._subscribe(this);\n                    for (const handler of this._listeners['subscribed']) {\n                        handler();\n                    }\n                };\n                this.unsubscribe = async () => {\n                    if (!this._subscribed) {\n                        return;\n                    }\n                    this._subscribed = false;\n                    await this._unsubscribe();\n                    for (const handler of this._listeners['unsubscribed']) {\n                        handler();\n                    }\n                };\n            }\n            on(eventName, listener) {\n                this._listeners[eventName].push(listener);\n                return this;\n            }\n            notify(data) {\n                for (const handler of this._listeners['data']) {\n                    handler(data);\n                }\n            }\n        }\n        const existingSubscriptions = this._subscriptions[eventName];\n        const id = (0, utils_1.getUniqueId)();\n        switch (eventName) {\n            case 'connected':\n            case 'disconnected':\n            case 'messageStatusUpdated':\n            case 'networkChanged':\n            case 'permissionsChanged':\n            case 'loggedOut': {\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions.has(id)) {\n                        return;\n                    }\n                    existingSubscriptions.set(id, data => {\n                        subscription.notify(data);\n                    });\n                }, async () => {\n                    existingSubscriptions.delete(id);\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            case 'transactionsFound':\n            case 'contractStateChanged': {\n                if (params == null) {\n                    throw new Error('Address must be specified for the subscription');\n                }\n                await this.ensureInitialized();\n                const address = params.address.toString();\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions.has(id)) {\n                        return;\n                    }\n                    existingSubscriptions.set(id, ((data) => {\n                        if (data.address.toString() === address) {\n                            subscription.notify(data);\n                        }\n                    }));\n                    let contractSubscriptions = this._contractSubscriptions.get(address);\n                    if (contractSubscriptions == null) {\n                        contractSubscriptions = new Map();\n                        this._contractSubscriptions.set(address, contractSubscriptions);\n                    }\n                    const subscriptionState = {\n                        state: eventName === 'contractStateChanged',\n                        transactions: eventName === 'transactionsFound',\n                    };\n                    contractSubscriptions.set(id, subscriptionState);\n                    const { total, withoutExcluded } = foldSubscriptions(contractSubscriptions.values(), subscriptionState);\n                    try {\n                        if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                            await this.rawApi.subscribe({ address, subscriptions: total });\n                        }\n                    }\n                    catch (e) {\n                        existingSubscriptions.delete(id);\n                        contractSubscriptions.delete(id);\n                        throw e;\n                    }\n                }, async () => {\n                    existingSubscriptions.delete(id);\n                    const contractSubscriptions = this._contractSubscriptions.get(address);\n                    if (contractSubscriptions == null) {\n                        return;\n                    }\n                    const updates = contractSubscriptions.get(id);\n                    const { total, withoutExcluded } = foldSubscriptions(contractSubscriptions.values(), updates);\n                    contractSubscriptions.delete(id);\n                    if (!withoutExcluded.transactions && !withoutExcluded.state) {\n                        await this.rawApi.unsubscribe({ address });\n                    }\n                    else if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                        await this.rawApi.subscribe({ address, subscriptions: withoutExcluded });\n                    }\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            default: {\n                throw new Error(`Unknown event ${eventName}`);\n            }\n        }\n    }\n    /**\n     * Returns provider api state\n     *\n     * ---\n     * Required permissions: none\n     */\n    async getProviderState() {\n        await this.ensureInitialized();\n        const state = await this._api.getProviderState();\n        return {\n            ...state,\n            permissions: (0, models_1.parsePermissions)(state.permissions),\n        };\n    }\n    /**\n     * Requests contract balance\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBalance(address) {\n        const { state } = await this.getFullContractState({\n            address,\n        });\n        return state == null ? '0' : state === null || state === void 0 ? void 0 : state.balance;\n    }\n    /**\n     * Requests contract data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFullContractState(args) {\n        await this.ensureInitialized();\n        return (await this._api.getFullContractState({\n            address: args.address.toString(),\n        }));\n    }\n    /**\n     * Requests accounts with specified code hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getAccountsByCodeHash(args) {\n        await this.ensureInitialized();\n        const { accounts, continuation } = await this._api.getAccountsByCodeHash({\n            ...args,\n        });\n        return {\n            accounts: accounts.map(address => new utils_1.Address(address)),\n            continuation,\n        };\n    }\n    /**\n     * Requests contract transactions\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransactions(args) {\n        await this.ensureInitialized();\n        const { transactions, continuation, info } = await this._api.getTransactions({\n            ...args,\n            address: args.address.toString(),\n        });\n        return {\n            transactions: transactions.map(models_1.parseTransaction),\n            continuation,\n            info,\n        };\n    }\n    /**\n     * Searches transaction by hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransaction(args) {\n        await this.ensureInitialized();\n        const { transaction } = await this._api.getTransaction({\n            ...args,\n        });\n        return {\n            transaction: transaction ? (0, models_1.parseTransaction)(transaction) : undefined,\n        };\n    }\n    /**\n     * Computes contract address from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getExpectedAddress(abi, args) {\n        const { address } = await this.getStateInit(abi, args);\n        return address;\n    }\n    /**\n     * Computes contract address and state from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getStateInit(abi, args) {\n        await this.ensureInitialized();\n        const { address, stateInit, hash } = await this._api.getExpectedAddress({\n            abi: JSON.stringify(abi),\n            ...args,\n            initParams: (0, models_1.serializeTokensObject)(args.initParams),\n        });\n        return {\n            address: new utils_1.Address(address),\n            stateInit,\n            hash,\n        };\n    }\n    /**\n     * Decodes initial contract data using the specified ABI\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async unpackInitData(abi, data) {\n        await this.ensureInitialized();\n        const { publicKey, initParams } = await this._api.unpackInitData({\n            abi: JSON.stringify(abi),\n            data,\n        });\n        return {\n            publicKey,\n            initParams: (0, models_1.parsePartialTokensObject)(abi.data, initParams),\n        };\n    }\n    /**\n     * Computes hash of base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBocHash(boc) {\n        await this.ensureInitialized();\n        return await this._api\n            .getBocHash({\n            boc,\n        })\n            .then(({ hash }) => hash);\n    }\n    /**\n     * Creates base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async packIntoCell(args) {\n        await this.ensureInitialized();\n        return (await this._api.packIntoCell({\n            abiVersion: args.abiVersion,\n            structure: args.structure,\n            data: (0, models_1.serializeTokensObject)(args.data),\n        }));\n    }\n    /**\n     * Decodes base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async unpackFromCell(args) {\n        await this.ensureInitialized();\n        const { data } = await this._api.unpackFromCell({\n            ...args,\n            structure: args.structure,\n        });\n        return {\n            data: (0, models_1.parseTokensObject)(args.structure, data),\n        };\n    }\n    /**\n     * Extracts public key from raw account state\n     *\n     * **NOTE:** can only be used on contracts which are deployed and has `pubkey` header\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async extractPublicKey(boc) {\n        await this.ensureInitialized();\n        const { publicKey } = await this._api.extractPublicKey({\n            boc,\n        });\n        return publicKey;\n    }\n    /**\n     * Converts base64 encoded contract code into tvc with default init data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async codeToTvc(code) {\n        await this.ensureInitialized();\n        const { tvc } = await this._api.codeToTvc({\n            code,\n        });\n        return tvc;\n    }\n    /**\n     * Merges code and data into state init\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async mergeTvc(args) {\n        await this.ensureInitialized();\n        return await this._api.mergeTvc(args);\n    }\n    /**\n     * Splits base64 encoded state init into code and data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async splitTvc(tvc) {\n        await this.ensureInitialized();\n        return await this._api.splitTvc({\n            tvc,\n        });\n    }\n    /**\n     * Merges code and data into state init\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async setCodeSalt(args) {\n        let salt;\n        if (typeof args.salt === 'string') {\n            await this.ensureInitialized();\n            salt = args.salt;\n        }\n        else {\n            const { boc } = await this.packIntoCell(args.salt);\n            salt = boc;\n        }\n        return await this._api.setCodeSalt({ code: args.code, salt });\n    }\n    /**\n     * Retrieves salt from code. Returns undefined if code doesn't contain salt\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getCodeSalt(args) {\n        await this.ensureInitialized();\n        const { salt } = await this.rawApi.getCodeSalt({\n            code: args.code,\n        });\n        return salt;\n    }\n    /**\n     * Adds asset to the selected account\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async addAsset(args) {\n        await this.ensureInitialized();\n        let params;\n        switch (args.type) {\n            case 'tip3_token': {\n                params = {\n                    rootContract: args.params.rootContract.toString(),\n                };\n                break;\n            }\n            default:\n                throw new Error('Unknown asset type');\n        }\n        return await this._api.addAsset({\n            account: args.account.toString(),\n            type: args.type,\n            params,\n        });\n    }\n    async verifySignature(args) {\n        await this.ensureInitialized();\n        return await this._api.verifySignature(args);\n    }\n    /**\n     * Signs arbitrary data.\n     *\n     * NOTE: hashes data before signing. Use `signDataRaw` to sign without hash.\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signData(args) {\n        await this.ensureInitialized();\n        return await this._api.signData(args);\n    }\n    /**\n     * Signs arbitrary data without hashing it\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signDataRaw(args) {\n        await this.ensureInitialized();\n        return await this._api.signDataRaw(args);\n    }\n    /**\n     * Encrypts arbitrary data with specified algorithm for each specified recipient\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async encryptData(args) {\n        await this.ensureInitialized();\n        const { encryptedData } = await this._api.encryptData(args);\n        return encryptedData;\n    }\n    /**\n     * Decrypts encrypted data. Returns base64 encoded data\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async decryptData(encryptedData) {\n        await this.ensureInitialized();\n        const { data } = await this._api.decryptData({ encryptedData });\n        return data;\n    }\n    /**\n     * Sends an internal message from the user account.\n     * Shows an approval window to the user.\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessage(args) {\n        await this.ensureInitialized();\n        const { transaction } = await this._api.sendMessage({\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            amount: args.amount,\n            bounce: args.bounce,\n            payload: args.payload\n                ? {\n                    abi: args.payload.abi,\n                    method: args.payload.method,\n                    params: (0, models_1.serializeTokensObject)(args.payload.params),\n                }\n                : undefined,\n            stateInit: args.stateInit,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n        };\n    }\n    /**\n     * Sends an internal message from the user account without waiting for the transaction.\n     * Shows an approval window to the user.\n     *\n     * @see messageStatusUpdated\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessageDelayed(args) {\n        await this.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions();\n        const subscription = await this.subscribe('messageStatusUpdated');\n        subscription.on('data', data => {\n            if (!data.address.equals(args.sender)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this._api\n            .sendMessageDelayed({\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            amount: args.amount,\n            bounce: args.bounce,\n            payload: args.payload\n                ? {\n                    abi: args.payload.abi,\n                    method: args.payload.method,\n                    params: (0, models_1.serializeTokensObject)(args.payload.params),\n                }\n                : undefined,\n            stateInit: args.stateInit,\n        })\n            .catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(args.sender, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    _registerEventHandlers(provider) {\n        const knownEvents = {\n            connected: data => data,\n            disconnected: data => data,\n            transactionsFound: data => ({\n                address: new utils_1.Address(data.address),\n                transactions: data.transactions.map(models_1.parseTransaction),\n                info: data.info,\n            }),\n            contractStateChanged: data => ({\n                address: new utils_1.Address(data.address),\n                state: data.state,\n            }),\n            messageStatusUpdated: data => ({\n                address: new utils_1.Address(data.address),\n                hash: data.hash,\n                transaction: data.transaction != null ? (0, models_1.parseTransaction)(data.transaction) : undefined,\n            }),\n            networkChanged: data => data,\n            permissionsChanged: data => ({\n                permissions: (0, models_1.parsePermissions)(data.permissions),\n            }),\n            loggedOut: data => data,\n        };\n        for (const [eventName, extractor] of Object.entries(knownEvents)) {\n            provider.addListener(eventName, data => {\n                const handlers = this._subscriptions[eventName];\n                const parsed = extractor(data);\n                for (const handler of handlers.values()) {\n                    handler(parsed);\n                }\n            });\n        }\n    }\n}\nexports.ProviderRpcClient = ProviderRpcClient;\n/**\n * @category Provider\n */\nclass ProviderNotFoundException extends Error {\n    constructor() {\n        super('Everscale provider was not found');\n    }\n}\nexports.ProviderNotFoundException = ProviderNotFoundException;\n/**\n * @category Provider\n */\nclass ProviderNotInitializedException extends Error {\n    constructor() {\n        super('Everscale provider was not initialized yet');\n    }\n}\nexports.ProviderNotInitializedException = ProviderNotInitializedException;\nfunction foldSubscriptions(subscriptions, except) {\n    const total = { state: false, transactions: false };\n    const withoutExcluded = Object.assign({}, total);\n    for (const item of subscriptions) {\n        if (withoutExcluded.transactions && withoutExcluded.state) {\n            break;\n        }\n        total.state || (total.state = item.state);\n        total.transactions || (total.transactions = item.transactions);\n        if (item !== except) {\n            withoutExcluded.state || (withoutExcluded.state = item.state);\n            withoutExcluded.transactions || (withoutExcluded.transactions = item.transactions);\n        }\n    }\n    return { total, withoutExcluded };\n}\n"],
  "mappings": "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",
  "names": ["tx", "item", "id", "subscription", "onData", "state", "result", "f", "promise", "event", "events", "exports", "eventName", "subscription"]
}
