import { AllowedCodes, DecodedMsg, MsgTree, TraceType } from "locklift/internal/tracing/types";
import { Address } from "everscale-inpage-provider";
import { ContractWithName } from "locklift/types";
import { TracingInternal } from "locklift/internal/tracing/tracingInternal";
export declare class Trace<Abi = any> {
    private readonly tracing;
    readonly msg: MsgTree;
    private readonly srcTrace;
    outTraces: Array<Trace>;
    error: null | {
        phase: "compute" | "action";
        code: number;
        ignored?: boolean;
    };
    type: TraceType | null;
    contract: ContractWithName;
    decodedMsg: DecodedMsg | undefined;
    hasErrorInTree: boolean;
    constructor(tracing: TracingInternal, msg: MsgTree, srcTrace?: any);
    buildTree(allowedCodes: AllowedCodes | undefined, contractGetter: (codeHash: string, address: Address) => ContractWithName<Abi> | undefined): Promise<void>;
    checkForErrors(allowedCodes?: AllowedCodes): void;
    decodeMsg(contract?: ContractWithName | null): Promise<{
        decoded: DecodedMsg;
        finalType: TraceType | null;
    } | undefined>;
    decode(contract: ContractWithName<Abi> | undefined): Promise<void>;
    setMsgType(): void;
}
